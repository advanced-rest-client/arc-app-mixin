/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   arc-app-mixin.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />

declare namespace ArcComponents {


  /**
   * A set of common functions to be shared between versions of ARC
   * on different platforms.
   *
   * This mixin contains methods platform independent. Platform dependent functions
   * should be implemented in the version of the app.
   *
   * ## DOM requirements
   *
   * The mixin requires the element to have `arc-request-workspace` (or similar)
   * to be placerd in the DOM with id set to "workspace".
   */
  function ArcAppMixin<T extends new (...args: any[]) => {}>(base: T): T & ArcAppMixinConstructor;

  interface ArcAppMixinConstructor {
    new(...args: any[]): ArcAppMixin;
  }

  interface ArcAppMixin {
    readonly workspace: any;

    /**
     * A base path to the web componentes. It is used to determine
     * components location when including parts of the application.
     */
    componentsDir: string|null|undefined;

    /**
     * Additional route params read from navigation
     */
    routeParams: object|null|undefined;

    /**
     * When true then a source components are being loaded.
     */
    _loadingSources: boolean|null|undefined;

    /**
     * Currently opened application screen
     */
    page: String|null;

    /**
     * Google Analytics custom dimmensions
     */
    gaCustomDimensions: any[]|null|undefined;

    /**
     * Google Analytics custom metrics
     */
    gaCustomMetrics: any[]|null|undefined;

    /**
     * Application ID for analytics
     */
    appId: string|null|undefined;

    /**
     * Current application varsion
     */
    appVersion: string|null|undefined;

    /**
     * Browser version
     */
    browserVersion: string|null|undefined;

    /**
     * Application channel, `stable`, `beta`, `dev`
     */
    appChannel: string|null|undefined;

    /**
     * List of unread messages from app developer.
     */
    newMessages: Array<object|null>|null;

    /**
     * List of cached messages from app developer.
     */
    appMessages: any[]|null|undefined;

    /**
     * If true, messages center is opened.
     */
    messageCenterOpened: boolean|null|undefined;

    /**
     * True if application update is possible.
     * In web version it means rthe service worker updated files.
     */
    hasAppUpdate: boolean|null|undefined;

    /**
     * A scroll target for the components that relays on this property.
     */
    _scrollTarget: Element|null;

    /**
     * When set it enables Google Analytics
     */
    telemetry: boolean|null|undefined;

    /**
     * Google Drive access token
     */
    driveAccessToken: string|null|undefined;

    /**
     * A logger
     */
    log: object|null|undefined;

    /**
     * Application user configuration read from the config file.
     * It may not be ready when the app is initialized.
     */
    config: object|null|undefined;

    /**
     * True if history should be enabled. This value is set from settings
     * object.
     */
    historyEnabled: boolean|null|undefined;

    /**
     * Configuration object related to ARC menu.
     * It is used with menu popups. When a menu panel is pop out to new
     * window then selected menu is not rendered.
     *
     * This mixin does not provide methods to listen for changes in this
     * object as implementation is different dependening on the platform.
     *
     * Available keys:
     * - menuDisabled - true when menu should not be visible in the UI
     * - hideHistory
     * - hideSaved
     * - hideProjects
     * - hideApis
     */
    menuConfig: object|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Lazy loads component to the DOM.
     * It builds the component path as a `componentsDir` + bower_components
     * + `path` + .html.
     *
     * **Example**
     *
     * ```javascript
     * this._loadComponent('api-console/api-console')
     * .then(() => {}); // console is now loaded.
     * ```
     *
     * @param path Component path inside bower location.
     * @returns [description]
     */
    _loadComponent(path: String|null): any;
    _reportComponentLoadingError(url: any): void;

    /**
     * This component ensures that the workspace is loaded into the DOM.
     * It can be used when curreent operation don't require workspace to be
     * present in the DOM before bit it will now.
     */
    _loadWorkspace(): Promise<any>|null;

    /**
     * Handles navigation event and sets the route data.
     */
    _handleNavigation(e: CustomEvent|null): void;

    /**
     * Sends screen view to Google Analytics
     */
    _telemetryScreen(): void;

    /**
     * Initialize global settings variables
     *
     * @returns A promise resolved to a settings object.
     */
    initSettings(): Promise<object|null>;

    /**
     * Enables Google Analytics.
     *
     * Until settings status is checked Google Analytics components is not
     * even in the DOM. Once the `telemetry` flag is set analytics elements
     * are attached to the DOM and start handling events.
     *
     * This can be disabled by calling `_analyticsDisabled` or by sending
     * `settings-changed` custom event with `telemetry` key.
     */
    _analyticsEnabled(): void;

    /**
     * To be called if GA is disabled to remove GA elements from the DOM.
     */
    _analyticsDisabled(): void;

    /**
     * Handles settings change event.
     */
    _settingChanged(e: CustomEvent|null): void;

    /**
     * A function that handles `telemetry` property chnage.
     *
     * @param value New value
     */
    _telemetryChanged(value: String|Boolean|null): void;

    /**
     * Saves currently opened requests.
     *
     * @param opts Optional options object. It can contain `source`
     * property with value of `shortcut` to indicate that the shortcut was
     * used and the app can automatically save current request
     */
    saveOpened(opts: object|null): void;

    /**
     * Closes workspace tab by index.
     */
    closeWorkspaceTab(index: Number|null): void;

    /**
     * Closes all workspace tabs.
     */
    closeAllWorkspaceTabs(): void;

    /**
     * Closes all workspace tabs but selected.
     *
     * @param index Index of a tab to leave in workspace.
     */
    closeOtherWorkspaceTabs(index: Number|null): void;

    /**
     * Duplicates tab values at a position
     *
     * @param index Selected tab
     */
    duplicateWorkspaceTab(index: Number|null): void;

    /**
     * Returns number of currently opened tabs
     *
     * @returns Number of opened tabs in request workspace.
     */
    getTabsCount(): Number|null;

    /**
     * Opens new tab in the request workspace.
     */
    newRequestTab(): void;

    /**
     * Sends currently opened request.
     */
    sendCurrentTab(): void;

    /**
     * Updates a request object in this window for a specific tab.
     *
     * @param request ARC request obejct
     * @param index Tab index to update. If not provided (or not a number)
     * it uses current active tab.
     */
    updateRequestTab(request: object|null, index: Number|null): void;

    /**
     * Dispatches `navigate` event with passed `detail`.
     *
     * @param detail The detail object to set on the event.
     * Each navigate event requires `base` property to be set.
     */
    _dispatchNavigate(detail: object|null): void;

    /**
     * Navigates to cookie manager
     */
    openCookieManager(): void;

    /**
     * Navigates to Exchange search panel
     */
    openExchangeSearch(): void;

    /**
     * Navigates to themes panel
     */
    openThemesPanel(): void;

    /**
     * Navigates to about screen
     */
    openAbout(): void;

    /**
     * Navigates to Google Drive file browser
     */
    openDrivePicker(): void;

    /**
     * Opens the settings panel.
     */
    openSettings(): void;

    /**
     * Opens the host rules editor.
     */
    openHostRules(): void;

    /**
     * Navigates to import panel
     */
    openImport(): void;

    /**
     * Navigates to export panel
     */
    openExport(): void;

    /**
     * Opens web socket panel.
     */
    openWebSocket(): void;

    /**
     * Opens saved requests screen
     */
    openSaved(): void;

    /**
     * Opens history requests screen
     */
    openHistory(): void;

    /**
     * Opens requests workspace component.
     */
    openWorkspace(): void;

    /**
     * Handles ARC components event for application version.
     */
    _appVersionRequestHandler(e: CustomEvent|null): void;

    /**
     * Handler for `google-autorize` custom event sent by Drive component.
     * It calls `_requestAuthToken()` function which should be implemented
     * for a specific platform.
     */
    _googleOauthTokenRequested(e: CustomEvent|null): void;

    /**
     * Implementation is platform specific
     */
    _requestAuthToken(): void;

    /**
     * Abstract method to be implemented by ARC instances to notify user about
     * an error.
     *
     * @param message A message to render
     */
    notifyError(message: String|null): void;

    /**
     * Handler for `import-data-inspect`. Opens import panel and adds data to it.
     *
     * @returns A promise resolved when the component is loaded. It for tests.
     */
    _ispectImportHandler(e: CustomEvent|null): Promise<any>|null;
  }
}
